This package is about understanding concepts of OOPS in Java.

Principles of OOPS:
ABSTRACTION - Process of hiding the implementation details and showing only functionality to the user.
//Abstraction lets you focus on what the object does instead of how it does it.
//Procedural programming is about writing procedures or methods that perform operations on the data, by storing state in data structures and behavior in methods/functions.
//While object-oriented programming is about creating objects that contain both data (state) and methods (behaviour) within itself, just like real life objects, having some properties/characteristics and actionable behaviours.

Pillars of OOPS:
Pillar 1: ENCAPSULATION - Wrapping up of data (state) and methods (behavior) together into a single unit (i.e. class) and also hiding the data from outside world (i.e. data hiding).
Pillar 2: INHERITANCE - Process by which one class acquires the properties of another class (i.e. re-usability).
Pillar 3: POLYMORPHISM - Ability of a message to be displayed in more than one form (i.e. method overriding and method overloading).

ENCAPSULATION:
Encapsulation has two aspects:
1. A language construct that facilitates the bundling of data with the methods (or other functions) operating on that data: Class
2. A mechanism for restricting direct access to some of the object's components: Access Modifiers (private, protected, public, default(package protected))

Concepts within Encapsulation:
1. Class & Object
    1.1. Attributes (or Properties or Fields) - Variables
    1.2. Methods (or Behaviors) - Functions
    1.3. Constructor
        1.3.1. Default Constructor
        1.3.2. Parameterized Constructor
        1.3.3. Copy Constructor
            1.3.3.1. Shallow Copy
            1.3.3.2. Deep Copy
            1.3.3.3. Cloning
        1.3.4. Constructor Chaining
        1.3.5. Constructor Overloading
    1.4. Destructor
    1.5. Inner Class
        1.5.1. Static Inner Class
        1.5.2. Method Local Inner Class
        1.5.3. Anonymous Inner Class
        1.5.4. Nested Inner Class
2. Access Modifiers
    2.1. Access Modifiers in terms of Class, Method, Variable, Constructor
        2.1.1. private
        2.1.2. protected
        2.1.3. public
        2.1.4. default (package protected)
    2.2. Getter and Setter Methods
3. this keyword
4. static keyword
    4.1. static variable
    4.2. static method
    4.3. static block
    4.4. static class
5. final keyword
    5.1. final variable
    5.2. final method
    5.3. final class

